#include <iostream>
#include <iomanip> // E.g., std::quoted
#include <string>
#include <sstream> // E.g., std::istringstream, std::ostringstream
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <array>
#include <ranges> // E.g., std::subrange, std::view 
#include <utility> // E.g., std::pair,..
#include <algorithm> // E.g., std::find, std::all_of,...
#include <numeric> // E.g., std::accumulate
#include <limits> // E.g., std::numeric_limits

extern char const* pTest;
extern char const* pData;

using Result = int;
using Answers = std::vector<std::pair<std::string,Result>>;

using Model = std::vector<std::pair<char,int>>;
struct Vector {
  int row;
  int col;
  Vector operator-(Vector const& other) const {return Vector{.row=row-other.row,.col=col-other.col};}
  Vector operator+(Vector const& other) const {return Vector{.row=row+other.row,.col=col+other.col};}
  bool operator==(Vector const& other) const {return row==other.row and col==other.col;}
  bool operator<(Vector const& other) const {
    if (row==other.row) return col < other.col;
    else return row<other.row;
  }
};
using Map = std::set<Vector>;

Model parse(auto& in) {
    Model result{};
    std::string line{};
    char dir;
    int steps;
    while (in >> dir >> steps) {
        result.push_back({dir,steps});
    }
    return result;
}

std::ostream& operator<<(std::ostream& os,Vector const& v) {
  std::cout << "[row:" << v.row << ",col:" << v.col << "]";
  return os;
}


std::ostream& operator<<(std::ostream& os,Model const& model) {
  int count{0};
  for (auto [dir,steps] : model) {
    if (count++>0) os << "\n";
    os << "dir:" << dir << " steps:" << steps;
  }
  return os;
}

Vector to_stepped(Vector pos,char dir) {
  // std::cout << "\nto_stepped pos:" << pos << " dir:" << dir;
  Vector result{pos};
  switch (dir) {
    case 'U': --result.row; break;
    case 'R': ++result.col; break;
    case 'D': ++result.row; break;
    case 'L': --result.col; break;
  }
  // std::cout << " result:" << result;
  return result;
}

int manhattan_distance(Vector const& v1,Vector const& v2) {
  int result = std::abs(v1.row - v2.row) + std::abs(v1.col - v2.col);
  return result;
}

Vector to_adjacent(Vector const& head,Vector const& tail) {
  Vector result{tail};
  auto diff = head - tail;
  // std::cout << "\nto_adjacent head:" << head << " tail:" << tail << " diff:" << diff;
  // to_adjacent head:[row:-3,col:4] tail:[row:-1,col:4] diff:[row:-2,col:0] adjacent tail:[row:-4,col:4]
  if (diff.row==0 and diff.col>1) result.col = ++result.col;
  else if (diff.row==0 and diff.col<-1) result.col = --result.col;
  else if (diff.col==0 and diff.row>1) ++result.row;
  else if (diff.col==0 and diff.row<-1) --result.row;
  else if (manhattan_distance(head,tail) > 2) {
    if (diff.col>0 and diff.row>0) {
      ++result.col;
      ++result.row;
    }
    else if (diff.col>0 and diff.row<0) {
      ++result.col;
      --result.row;
    }
    else if (diff.col<0 and diff.row>0) {
      --result.col;
      ++result.row;
    }
    else if (diff.col<0 and diff.row<0) {
      --result.col;
      --result.row;
    }
  }
  // std::cout << " adjacent tail:" << result;
  return result;
}

void print_HT_on_map(Vector const& head,Vector const& tail,Map const& map) {
  Vector top_left{head};
  Vector bottom_right{head};
  for (auto const& pos : map) {
    top_left.row = std::min(top_left.row,pos.row);
    top_left.col = std::min(top_left.col,pos.col);
    bottom_right.row = std::max(bottom_right.row,pos.row);
    bottom_right.col = std::max(bottom_right.col,pos.col);
  }
  auto init_row = top_left.row-3;
  std::cout << "\ntop_left:" << top_left << " bottom_right:" << bottom_right;
  std::cout << "\n";
  for (int row = init_row;row <= bottom_right.row+3;++row) {
    if (row>init_row) std::cout << "\n";
    for (int col=top_left.col-3;col<=bottom_right.col+3;++col) {
      Vector pos{.row=row,.col=col};
      if (head==pos) std::cout << "H";
      else if (tail==pos) std::cout << "T";
      else if (map.contains(pos)) std::cout << '#';
      else std::cout << '.';
    }
  }
}

namespace part1 {
  Result solve_for(char const* pData) {
      Result result{};
      std::stringstream in{ pData };
      auto data_model = parse(in);
      std::cout << "\n" << data_model;
      Vector head{.row=0,.col=0};
      Vector tail = head;
      Map visited{tail};
      std::cout << "\n";
      print_HT_on_map(head,tail,visited);
      for (auto const& [dir,steps] : data_model) {
        std::cout << "\nstep: " << dir;
        for (int i=0;i<steps;++i) {
          head = to_stepped(head,dir);
          tail = to_adjacent(head,tail);
          visited.insert(tail);
        }
      }
      std::cout << "\n";
      print_HT_on_map(head,tail,visited);
      result = visited.size();
      return result;
  }
}

namespace part2 {
  Result solve_for(char const* pData) {
      Result result{};
      std::stringstream in{ pData };
      auto data_model = parse(in);
      return result;
  }
}

int main(int argc, char *argv[])
{
  Answers answers{};
  answers.push_back({"Part 1 Test",part1::solve_for(pTest)});
  answers.push_back({"Part 1     ",part1::solve_for(pData)});
  // answers.push_back({"Part 2 Test",part2::solve_for(pTest)});
  // answers.push_back({"Part 2     ",part2::solve_for(pData)});
  for (auto const& answer : answers) {
    std::cout << "\nanswer[" << answer.first << "] " << answer.second;
  }
  // std::cout << "\nPress <enter>...";
  // std::cin.get();
  std::cout << "\n";
  return 0;
}

char const* pTest = R"(R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2)";
char const* pData = R"(R 1
D 1
L 1
D 1
R 2
L 1
U 2
D 1
U 2
L 1
U 1
L 2
D 1
U 2
L 1
R 1
D 1
L 2
D 2
L 2
R 1
L 2
U 2
R 2
L 2
U 2
L 1
D 1
L 2
U 1
R 1
D 2
L 2
U 1
R 1
D 1
U 2
L 1
D 2
U 1
D 1
R 2
D 1
L 2
D 1
L 1
R 1
D 2
L 1
R 2
D 2
U 2
R 2
D 2
R 2
L 2
D 2
L 2
D 1
U 2
R 1
D 2
L 2
R 2
L 1
D 1
U 2
D 1
R 2
U 2
R 2
D 1
L 1
U 2
D 1
U 1
D 2
U 1
R 1
U 2
D 1
L 2
U 1
L 2
D 2
R 1
U 2
L 1
D 2
R 1
U 1
D 1
L 2
U 1
R 1
D 2
U 2
L 1
U 2
D 2
R 1
U 2
R 1
U 2
R 1
D 2
U 1
D 2
L 2
D 2
L 2
D 2
R 1
U 1
D 3
U 1
R 2
U 3
D 1
U 2
D 2
U 2
D 1
U 2
R 2
L 2
U 1
L 3
D 1
R 3
D 3
R 2
L 1
U 3
D 1
U 2
R 2
D 1
R 3
D 2
R 3
D 1
U 3
L 3
R 2
U 3
L 3
U 2
L 3
D 1
R 3
U 3
R 2
D 1
U 3
R 3
D 1
L 2
D 2
L 2
D 3
R 2
U 3
L 3
D 2
U 3
L 2
U 3
D 1
L 1
D 3
R 1
D 3
U 1
L 3
U 1
D 2
U 1
D 1
U 2
D 3
L 1
U 1
R 1
U 3
D 3
R 1
L 2
R 3
L 3
U 1
D 2
R 2
U 2
D 3
U 2
D 3
L 1
R 3
D 3
R 2
U 3
D 3
L 2
R 3
D 3
R 2
L 1
R 3
D 2
R 1
D 3
L 1
U 1
D 2
R 1
D 1
L 1
R 2
L 1
U 1
L 2
D 2
L 2
D 1
L 2
U 3
D 1
R 3
L 2
R 1
L 2
R 3
U 2
L 4
R 3
L 1
R 2
D 2
L 4
U 3
L 1
D 1
L 3
U 2
L 3
U 2
L 1
R 2
L 3
U 1
D 2
R 1
L 4
R 4
L 4
U 2
D 2
R 2
L 2
U 2
R 1
D 3
L 4
R 2
U 1
L 4
R 1
L 1
D 4
R 3
D 1
R 2
L 2
R 3
L 1
U 1
D 3
U 2
R 1
L 1
D 3
R 2
U 2
R 3
U 2
D 1
R 4
U 4
D 3
U 3
R 2
U 1
L 1
U 4
D 1
R 4
D 4
L 3
U 4
R 4
L 1
R 1
U 2
R 4
D 2
R 1
U 2
L 1
D 1
L 3
R 3
L 3
D 3
L 4
D 2
U 2
D 3
R 1
U 1
D 3
U 1
R 3
D 2
L 3
R 2
D 1
L 3
D 3
U 3
D 4
L 2
U 3
D 5
L 2
D 2
R 2
L 3
D 5
U 4
R 1
D 5
R 1
D 1
L 2
R 4
U 2
D 3
R 5
L 2
R 2
D 1
R 2
U 5
L 4
U 5
D 1
L 2
U 2
R 2
D 4
U 3
L 2
D 1
U 4
L 4
D 3
L 3
D 3
R 1
U 1
R 1
U 1
R 2
D 3
R 5
U 1
D 2
L 5
U 5
L 4
D 4
U 4
L 1
R 5
U 2
L 3
U 2
D 3
L 5
D 5
L 2
U 2
D 4
U 3
D 3
L 1
D 2
R 2
D 1
R 4
L 3
D 1
U 4
L 1
R 2
L 4
D 5
R 3
D 1
L 5
D 5
U 3
R 2
D 4
L 2
R 2
D 3
R 3
U 2
R 5
U 4
R 3
L 1
D 2
U 1
L 1
R 2
U 4
D 4
L 1
R 1
U 4
L 3
U 5
R 3
L 4
D 3
U 1
R 4
U 1
L 1
U 3
R 4
L 5
D 1
U 4
R 5
L 1
R 4
D 2
L 6
D 5
U 5
L 5
R 6
D 1
U 2
R 1
U 4
D 6
L 6
D 6
U 6
D 4
U 4
D 1
U 3
L 5
D 6
R 1
L 1
D 2
L 4
D 4
L 4
R 4
U 2
L 3
D 4
R 3
D 4
U 5
R 4
U 1
R 6
L 3
R 2
U 1
L 1
R 2
D 3
R 6
D 6
U 1
D 3
U 4
D 5
L 5
U 3
D 6
L 5
R 5
U 1
R 4
D 2
L 2
R 4
L 5
R 4
L 3
D 5
R 6
L 6
U 1
R 5
U 6
D 2
R 2
D 1
L 6
U 4
L 1
R 5
L 1
R 2
D 1
L 4
U 4
L 1
R 3
U 5
L 2
D 6
U 5
R 6
D 6
U 3
L 3
U 3
L 4
D 5
U 2
D 4
U 5
R 6
U 5
D 2
U 6
D 3
L 3
D 6
L 5
R 2
D 6
R 7
D 3
L 7
D 3
U 2
R 7
U 2
L 6
R 7
D 3
R 7
U 5
R 7
L 5
R 7
L 7
U 4
D 4
U 1
D 3
U 1
D 5
R 3
U 1
D 2
U 1
L 4
U 2
L 6
D 7
U 1
D 4
U 6
L 4
R 4
D 4
R 6
D 7
R 1
D 7
L 4
R 4
L 1
U 1
R 6
L 7
D 7
L 5
U 7
D 3
L 6
D 6
U 4
R 1
L 2
D 4
R 3
L 1
R 7
D 1
L 2
U 1
D 2
R 1
U 3
D 4
L 3
U 6
L 4
R 2
L 1
U 6
D 1
R 5
U 2
D 2
L 7
U 2
R 5
D 2
R 4
D 4
R 3
L 2
R 3
U 7
L 5
R 7
U 2
L 7
D 3
U 6
D 4
U 4
D 6
U 3
L 6
R 4
D 2
R 4
D 2
R 3
L 5
D 1
U 7
D 4
L 4
U 2
D 2
U 7
L 5
R 6
U 8
L 7
D 2
U 1
R 6
D 4
L 4
R 7
D 1
L 6
D 7
R 7
U 3
L 6
U 1
L 8
D 6
U 8
L 7
U 5
D 8
L 2
D 3
L 8
U 1
D 5
L 4
R 6
D 8
L 6
U 5
R 3
U 7
R 6
U 3
L 3
D 4
R 4
L 2
R 6
D 3
R 3
L 8
U 2
D 6
U 3
D 8
U 6
D 4
U 8
R 7
D 2
U 6
D 6
R 1
U 3
D 3
R 1
U 3
R 1
D 7
L 8
R 8
U 7
R 3
L 8
U 2
L 8
D 4
U 4
R 1
D 3
R 4
U 3
L 7
U 2
R 7
D 2
U 4
D 3
L 8
D 5
L 3
U 4
D 6
L 5
D 2
U 1
R 6
L 4
R 6
U 5
R 8
U 8
D 7
L 5
D 2
L 8
U 2
D 1
R 1
L 7
U 4
R 2
U 7
D 6
R 6
L 5
U 8
D 7
R 8
L 8
D 6
U 6
R 1
D 5
L 7
R 8
L 4
D 3
L 2
U 5
R 9
L 8
D 8
L 2
R 4
L 7
R 5
L 1
R 8
D 8
L 4
U 2
D 7
L 7
D 6
R 8
L 3
D 7
U 1
R 6
D 6
U 6
L 9
D 1
R 7
L 5
R 5
U 5
D 4
L 8
U 4
D 8
R 4
D 6
U 3
D 7
L 5
D 6
R 9
U 4
R 6
L 3
U 4
D 9
L 7
R 5
D 9
L 6
U 7
L 7
R 4
D 5
R 7
L 5
R 3
U 8
L 6
U 5
L 9
R 8
U 4
D 2
L 4
D 7
R 7
D 4
L 4
U 2
L 3
R 1
D 3
U 6
R 1
U 8
R 2
L 4
D 3
L 5
U 4
R 7
L 2
R 7
L 9
D 9
U 5
L 4
U 1
D 1
U 6
D 1
L 6
D 7
U 5
D 9
R 9
D 5
U 9
L 3
R 5
D 10
R 1
U 7
D 6
L 3
U 5
R 1
D 5
R 8
U 3
L 1
D 2
R 1
L 6
R 8
D 9
U 9
D 4
R 1
U 8
L 5
U 4
D 7
L 1
R 4
L 6
D 4
R 5
D 1
R 10
D 5
R 7
U 6
R 5
U 2
L 8
R 1
U 3
L 5
U 4
L 3
D 3
U 6
D 10
L 3
D 7
L 5
D 4
U 6
R 9
U 5
D 5
R 2
L 7
U 8
D 5
R 9
L 6
R 8
U 9
L 4
R 10
D 10
L 9
R 8
L 4
R 5
L 9
D 1
L 3
R 9
U 2
L 5
R 2
U 1
R 4
D 10
U 3
D 8
L 9
D 8
L 5
D 4
U 2
L 8
R 5
U 4
D 1
L 4
U 7
D 9
R 3
D 7
R 9
L 6
R 6
U 8
L 10
U 5
D 4
R 5
L 6
D 7
L 10
R 1
L 9
U 6
D 9
R 7
L 7
D 6
U 6
R 1
D 7
L 1
R 9
D 9
R 3
L 5
D 4
R 3
L 5
D 11
U 1
R 6
D 8
R 4
D 3
R 9
U 3
D 8
U 7
R 2
U 10
R 4
L 4
D 10
R 8
U 11
R 7
D 7
R 9
D 11
U 6
R 7
D 10
L 4
D 5
L 7
D 3
L 4
D 4
U 4
R 3
L 9
D 4
L 8
U 5
R 7
L 2
D 4
R 11
U 10
D 3
R 8
D 3
R 10
L 8
U 6
R 4
D 10
R 7
D 3
R 2
U 1
D 5
L 8
U 2
R 1
U 8
R 11
L 3
U 10
L 5
D 3
L 6
U 10
L 11
D 4
L 5
D 1
L 4
D 1
L 3
R 7
U 7
R 4
L 1
U 10
D 11
L 1
R 1
U 9
D 6
L 9
D 1
L 4
D 11
L 5
U 2
L 5
D 8
U 10
D 5
U 10
L 8
R 11
D 10
U 11
R 4
U 6
D 11
R 1
L 4
U 12
L 8
U 12
D 4
L 7
U 7
L 8
D 3
U 1
L 12
D 5
U 3
D 6
R 7
U 1
D 12
R 6
U 3
D 3
R 12
U 5
R 3
U 8
L 6
R 6
U 3
L 4
D 8
L 5
D 12
U 1
L 9
R 4
L 1
D 6
U 9
L 5
R 3
L 9
D 8
R 6
D 3
U 6
L 1
D 7
U 5
D 1
L 11
R 7
D 11
L 3
U 6
R 9
D 12
R 11
L 5
R 8
L 2
U 10
R 6
U 10
L 9
U 1
L 1
R 8
L 7
R 3
U 4
L 3
R 8
L 9
R 11
L 9
D 11
U 1
L 12
R 6
L 3
R 3
D 12
U 9
L 9
D 8
R 4
L 7
R 1
U 2
R 4
U 4
R 11
U 7
D 11
U 3
D 6
U 7
L 2
D 4
U 9
R 3
L 8
R 9
L 4
R 5
L 7
D 3
R 8
L 6
U 10
R 3
L 6
D 8
U 3
D 9
L 1
U 13
R 12
L 13
R 2
U 8
R 1
D 11
R 5
L 4
U 5
L 3
D 13
U 2
D 1
U 2
L 9
D 3
R 6
U 13
L 3
U 5
R 2
D 2
L 5
U 4
R 6
D 1
U 9
L 7
R 11
U 10
D 12
R 10
U 7
R 5
L 2
R 13
L 13
D 3
R 7
U 1
L 1
D 2
L 9
U 12
D 7
U 13
L 12
U 13
D 7
U 7
D 8
L 2
U 6
D 2
U 6
L 8
U 4
D 11
U 11
L 11
R 10
L 10
R 6
D 13
U 2
L 7
U 8
D 1
R 6
L 7
R 9
L 8
R 9
L 6
R 7
D 12
R 11
L 8
R 1
D 5
R 5
L 10
U 6
L 8
D 9
L 5
U 4
D 12
U 8
L 13
U 6
D 10
R 5
L 13
D 7
L 13
R 5
L 10
D 13
L 9
R 3
D 8
U 9
D 10
U 10
D 7
L 5
R 5
D 9
L 7
R 10
D 13
R 1
U 2
R 6
U 14
R 10
D 6
U 13
D 14
U 5
D 1
U 8
R 4
U 9
R 13
L 4
D 2
R 8
U 2
D 12
U 3
R 6
U 6
D 11
R 7
L 12
R 9
U 7
D 1
R 14
L 11
U 4
D 13
U 5
L 7
R 14
L 1
U 6
D 3
L 1
U 13
D 8
U 14
D 5
U 14
L 1
R 1
D 5
U 7
L 8
R 6
U 1
D 2
R 14
U 13
L 10
U 8
D 13
U 6
R 2
D 4
R 6
U 7
D 10
L 6
U 5
L 3
D 9
U 13
D 8
U 3
R 3
L 12
D 5
R 8
U 7
R 11
U 6
D 7
R 13
U 1
D 9
U 10
D 3
L 5
R 12
L 4
D 13
R 7
D 12
R 11
D 9
R 5
U 13
R 3
D 4
U 10
R 3
U 6
L 4
R 1
U 4
L 9
D 11
U 5
D 3
U 13
D 1
L 1
D 13
L 2
R 9
L 4
R 2
U 9
D 9
U 12
L 14
R 2
L 9
R 5
U 2
D 3
R 13
U 5
D 1
U 15
R 6
D 14
R 8
L 9
D 14
L 6
R 8
U 14
R 11
L 3
D 15
U 5
R 1
L 7
R 12
D 1
R 4
D 13
U 9
D 2
L 3
U 10
R 10
D 2
R 6
U 13
D 7
R 5
U 5
L 12
U 6
R 1
L 7
U 9
D 15
L 8
U 9
L 5
R 3
L 9
U 6
L 11
D 8
L 11
D 13
U 3
R 6
D 2
L 10
R 15
U 2
D 8
R 6
D 6
L 8
D 7
U 2
D 14
U 4
R 6
D 15
L 12
R 4
D 3
U 7
D 10
L 8
U 7
R 10
U 11
D 2
R 10
D 10
U 13
R 8
L 2
U 12
R 9
U 12
R 5
U 10
L 6
R 3
D 10
L 10
U 6
L 4
R 3
D 9
R 15
D 14
L 11
R 5
U 2
R 14
L 15
R 3
D 3
L 4
U 10
D 14
L 9
D 5
L 16
U 12
L 4
D 15
L 10
R 14
D 4
R 12
L 7
U 5
R 3
L 6
U 16
L 5
U 8
D 8
L 6
D 3
U 14
R 1
L 13
U 4
D 11
R 5
L 11
D 7
R 1
L 14
U 10
L 5
D 15
U 14
L 4
D 7
U 3
R 1
U 2
R 3
D 16
U 7
R 7
D 13
R 7
D 5
U 7
R 16
U 4
L 3
R 9
U 1
D 2
R 5
D 3
U 8
R 5
L 13
U 13
L 2
R 9
L 14
D 10
R 1
U 1
R 14
U 14
R 2
L 1
R 12
L 1
D 6
R 2
D 7
R 11
L 5
D 8
R 15
D 12
R 12
L 8
D 10
R 2
D 12
U 15
L 9
D 4
U 3
L 8
D 3
U 9
D 16
L 2
U 14
R 15
D 14
U 12
D 6
U 14
R 11
D 12
R 2
U 13
L 2
R 1
D 6
U 13
D 15
U 1
R 14
L 16
D 8
R 13
L 14
R 3
D 8
L 6
R 16
D 6
L 13
R 2
L 11
D 2
U 1
R 15
L 9
U 1
R 12
L 9
D 7
L 8
U 2
L 14
R 7
U 8
D 15
R 8
D 13
L 15
R 11
D 17
U 2
R 14
L 9
U 11
D 6
U 4
D 8
U 16
D 5
L 3
D 11
L 7
U 11
L 4
D 5
L 5
D 2
U 8
R 17
D 17
U 12
R 4
L 13
R 15
L 10
U 2
L 10
R 6
D 1
U 6
L 3
D 8
R 4
D 1
L 4
D 13
R 1
U 3
L 1
U 9
D 13
U 2
D 13
R 6
D 8
R 6
D 13
R 4
D 10
L 10
U 8
D 1
R 6
U 14
R 3
L 10
U 15
L 11
U 13
L 4
U 5
L 16
R 16
U 11
R 14
D 7
U 5
R 9
L 5
U 12
R 16
U 10
D 5
R 17
L 3
D 5
U 13
R 3
U 3
L 14
U 1
L 8
R 2
D 3
U 9
D 7
L 1
D 5
R 16
D 12
R 1
U 2
L 16
U 3
R 18
D 11
R 3
L 17
R 7
L 6
D 13
L 5
R 12
D 3
U 1
L 1
U 5
L 8
R 11
L 13
D 14
R 17
D 17
L 2
U 7
D 18
R 3
D 2
U 6
D 9
R 3
U 3
R 5
D 16
R 9
D 13
U 8
D 17
R 4
L 6
R 7
D 2
R 15
U 10
R 15
D 6
L 8
R 17
D 5
L 9
U 18
D 10
U 3
L 6
U 10
D 10
U 16
R 6
D 18
U 10
D 8
U 14
R 3
U 14
L 16
R 3
D 5
L 2
R 4
D 9
L 13
R 17
L 8
D 2
R 16
D 18
L 11
D 15
U 5
D 7
U 14
D 13
U 7
L 13
D 13
R 1
D 15
R 11
L 1
U 6
D 14
L 6
U 8
D 15
R 8
L 12
D 17
R 8
L 17
D 16
R 9
D 19
U 4
R 9
U 10
L 3
U 3
D 5
R 2
U 6
L 16
D 8
R 4
L 16
R 15
U 6
L 8
D 6
L 6
R 1
L 8
D 13
L 1
U 7
R 16
L 16
U 1
L 18
D 16
L 8
U 2
D 1
R 2
D 10
U 8
D 2
R 18
U 14
D 15
R 15
U 3
D 1
U 17
L 17
D 15
L 14
R 6
L 18
U 19
L 6
U 17
L 1
D 2
U 17
R 11
L 3
R 3
L 12
U 1
L 9
U 13
D 15
U 12
R 1
L 5
D 17
L 14
D 13
L 2
D 10
U 5
R 13
L 19
D 1
R 12
U 17
R 15
D 19
U 12
D 16
R 2
U 3
R 15
L 13
U 11
D 19
R 10
D 19
L 2
U 12
R 5
L 13
U 13
R 1
D 11
R 17
D 7
U 4
D 14
L 13
R 8
L 8
D 8)";
